from google_sheets.text_templates.champions_dict import \
    translate_champion_names

start_row = 2
end_row = 20
lvl_mapping = {
    '30': '3Ô∏è‚É£0Ô∏è‚É£',
    '31': '3Ô∏è‚É£1Ô∏è‚É£',
    '32': '3Ô∏è‚É£2Ô∏è‚É£',
    '33': '3Ô∏è‚É£3Ô∏è‚É£',
    '34': '3Ô∏è‚É£4Ô∏è‚É£',
    '35': '3Ô∏è‚É£5Ô∏è‚É£',
    '36': '3Ô∏è‚É£6Ô∏è‚É£',
    '37': '3Ô∏è‚É£7Ô∏è‚É£',
    '38': '3Ô∏è‚É£8Ô∏è‚É£',
    '39': '3Ô∏è‚É£9Ô∏è‚É£',
    '40': '4Ô∏è‚É£0Ô∏è‚É£',
    '50': '5Ô∏è‚É£0Ô∏è‚É£',
}


def create_summary_ru(acc_number, BE, LVL, skins, RP=None):
    LVL = lvl_mapping.get(LVL, LVL)
    skin_lines = skins.split('\n')
    # print(f'skin_lines: {skin_lines}')
    skins_str = ''
    # print(f'skins_str: {skins_str}')
    for skin in skin_lines:
        # print(f'skin: {skin}')
        skin_name = (
            skin.rsplit(None, 1)[-1] if ' ' in skin else skin
        )  # get the last word (champion name)
        # print(f'skin_name: {skin_name}')
        skin_name = translate_champion_names(
            skin_name
        )  # translate the champion name
        temp_str = skins_str + (', ' if skins_str else '') + skin_name
        # print(f'temp_str: {temp_str}')
        # add the new skin_name only if it doesn't exceed the limit
        if len(temp_str) <= (41 if RP else 51):
            skins_str = temp_str
            # print(f'skins_str: {skins_str}')
        else:
            # print(f'break')
            break
    if RP is None:
        # print(f'‚Ññ{acc_number}üÖ∞Ô∏è–ê–≤—Ç–æ–≤—ã–¥–∞—á–∞üÖ∞Ô∏èüî∑{BE}BE{LVL}LVLüßæ–°–∫–∏–Ω—ã –¥–ª—è:{skins_str}')
        return (
            f'‚Ññ{acc_number}üÖ∞Ô∏è–ê–≤—Ç–æ–≤—ã–¥–∞—á–∞üÖ∞Ô∏èüî∑{BE}BE{LVL}LVLüßæ–°–∫–∏–Ω—ã –¥–ª—è:{skins_str}'
        )
    else:
        return f'‚Ññ{acc_number}üÖ∞Ô∏è–ê–≤—Ç–æ–≤—ã–¥–∞—á–∞üÖ∞Ô∏èüî∑{BE}BE{LVL} LVLüí•350RPüí•Ô∏èüßæ–°–∫–∏–Ω—ã –¥–ª—è:{skins_str}'


def create_summary_en(acc_number, BE, LVL, skins, RP=None):
    LVL = lvl_mapping.get(LVL, LVL)
    skin_lines = skins.split('\n')
    # print(f'skin_lines: {skin_lines}')
    skins_str = ''
    # print(f'skins_str: {skins_str}')
    for skin in skin_lines:
        # print(f'skin: {skin}')
        skin_name = (
            skin.rsplit(None, 1)[-1] if ' ' in skin else skin
        )  # get the last word (champion name)
        # print(f'skin_name: {skin_name}')
        # skin_name = translate_champion_names(skin_name)  # translate the champion name
        temp_str = skins_str + (', ' if skins_str else '') + skin_name
        # print(f'temp_str: {temp_str}')
        # add the new skin_name only if it doesn't exceed the limit
        if len(temp_str) <= (41 if RP else 51):
            skins_str = temp_str
            # print(f'skins_str: {skins_str}')
        else:
            # print(f'break')
            break
    if RP is None:
        return (
            f'‚Ññ{acc_number}üÖ∞Ô∏èAUTO-SALEüÖ∞Ô∏èüî∑{BE}BE{LVL}LVLüßæSkins for:{skins_str}'
        )
    else:
        return (
            f'‚Ññ{acc_number}üÖ∞Ô∏èAUTO-SALEüÖ∞Ô∏èüî∑{BE}BE{LVL}LVLüí•350RPüí•‚Äç'
            f'üßæSkins for:{skins_str}'
        )


def create_description_ru(acc_number, skins, screenshot):
    return (
        f'#{acc_number}#\n'
        f'–ü—Ä–∏–≤–µ—Ç ü´° \n'
        f'–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –º–Ω–æ–π. \n'
        f'–ü—Ä–æ–∫–∞—á–∞–Ω –º–Ω–æ–π, –Ω–æ –æ–Ω —Å —Ä–∞–¥–æ—Å—Ç—å—é —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–ºüòä, \n'
        f'—Ç—ã –ø–æ—Å—Ç–∞–≤–∏—à—å —Ç—É–¥–∞ —Å–≤–æ—é –ø–æ—á—Ç—Éüì©, –Ω–∞—Å—Ç–æ—è—â—É—é, \n'
        f'–ø–æ—Å—Ç–∞–≤–∏—à—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å, –º–æ—â–Ω—ã–πüí™, \n'
        f'–∏ –≤–ø–µ—Ä—ë–¥ –≤ —Ä–∞–Ω–∫–µ–¥—ã (‚úø‚ó†‚Äø‚ó†) \n'
        f' \n'
        f'üßö‚Äç‚ôÄÔ∏è–°–∫–∏–Ω—á–∏–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: \n'
        f'{skins} \n'
        f' \n'
        f'üëì–ê –≤–æ—Ç –∑–¥–µ—Å—å, —Ç—ã —É–≤–∏–¥–∏—à—å —á—Ç–æ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞  - \n'
        f'{screenshot} \n'
        f' \n'
        f'üî¥–ò—Ç–∞–∫, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å: \n'
        f'üü¢–ê–∫–∫–∞—É–Ω—Ç –Ω–∞–≤—Å–µ–≥–¥–∞ \n'
        f'üü¢–ì–∞—Ä–∞–Ω—Ç–∏—é –æ—Ç –±–∞–Ω–∞ (–µ—Å–ª–∏ —Ç—ã –∫–æ–Ω–µ—á–Ω–æ —Å–∞–º –µ–≥–æ –Ω–µ –∑–∞–±–∞–Ω–∏—à—å —Å–∫—Ä–∏–ø—Ç–∞–º–∏) \n'
        f'üü¢–ß–∏—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É \n'
        f'üü¢–ö—É—á—É —ç—Å—Å–µ–Ω—Ü–∏–∏ \n'
        f'üü¢–ü–æ–¥–¥–µ—Ä–∂–∫—É –≤ —á–∞—Ç–µ üòâ \n'
        f' \n'
        f'–ü–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –∏–≥—Ä–æ–π –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ Practice Tool,'
        f' –ª–∏–±–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª PersistedSettings.json —Ç–æ–ª—å–∫–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ, '
        f'—á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª–∏—Å—å. \n'
        f' \n'
        f'–ò–≥—Ä–∞—Ç—å –≤ –æ–±—ã—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –ø–µ—Ä–µ–¥ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–º–∏ –∏–≥—Ä–∞–º–∏, –Ω—É–∂–Ω–æ, '
        f'—á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, —Ö–æ—Ç—è –±—ã –Ω–µ–º–Ω–æ–≥–æ.'
    )


def create_description_en(acc_number, skins, screenshot):
    return (
        f'#{acc_number}#\n'
        f'YO! \n'
        f'üßö‚Äç‚ôÄÔ∏èSkins on the account: \n'
        f'{skins} \n'
        f' \n'
        f'üëìScreen of hextech - \n'
        f'{screenshot} \n'
        f' \n'
        f'üî¥So, you get: \n'
        f'üü¢Account with not linked email. \n'
        f'üü¢Account forever \n'
        f'üü¢Guarantee from ban (if you do not ban it yourself with scripts) \n'
        f'üü¢Clean statistics \n'
        f'üü¢A lot of essence \n'
        f'üü¢Support in chat üòâ \n'
        f' \n'
        f'Before the first game, do not forget to set up an account in the '
        f'Practice Tool, or set the PersistedSettings.json '
        f'file to read only so that the'
        f'Play regular modes before ranked games, you need to hide game stats '
        f'from other players, at least a little bit.'
        f'You can buy an account even if Im offline, '
        f'the account is issued automatically üòâ \n'
    )
